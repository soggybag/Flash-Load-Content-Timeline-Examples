/* XMLLoader Example This class is a wrapper for the URLLoader, URLRequest and URLVariables classesIt extends EventDispatcher and so can prety much be treated just like the URLLoader.The XMLLoader provides the advantage of being easier to use since you do not need to create URLRequest and URLVariable Objects when using it. public methods:XMLLoader loadpublic propertiesdataEvents:Event.COMPLETE---------------------------------------------------------------------------------------------------public function XMLLoader( _xml_url:String = null, _vars:Object = null )Call the constructor with the URL you want to load as a String. You an also include an Object describing the variables you want to pass to a serverside script. For example, the following sends two variables name and email to a serverside script, sent via the GET method.{ method:"get", name:"Joe", email:"me@there.com" }The method property sets the HTTP method used. If this property is omitted variabels are sent via POSTYou might use the XMLLoader like this:var my_xml:XMLLoader = new XMLLoader( "http://domain.com/script.php", { method:"get", name:"Joe", email:"me@there.com" } );Or use it without variables:var my_xml:XMLLoader = new XMLLoader( "http://domain.com/script.php", { method:"get", name:"Joe" );Or use it without either:var my_xml:XMLLoader = new XMLLoader();----------------------------------------------------------------------------------------------------- load( _xml_url:String, _vars:Object = null ):voidThe load function does everything the constructor does. Pass it a URL as a string to load a file. Include variables as an object. The variables are an optional item. */package com.webdevils {	import flash.events.*;	import flash.net.*;		public class XMLLoader extends EventDispatcher {		public var data;				public function XMLLoader( _xml_url:String = null, _vars:Object = null ) {			if ( _xml_url != null ) {				load( _xml_url, _vars );			}		}				public function load( _xml_url:String, _vars:Object = null ):void {			var new_request:URLRequest 	= new URLRequest( _xml_url );			var loader:URLLoader 		= new URLLoader();			var method:String 			= "POST";						if ( _vars != null ) {				var new_vars:URLVariables = new URLVariables(); 	// mke a vars object				for ( var p in _vars ) {					if ( p == "method" ) {						method = _vars[p];					} else {						new_vars[p]	= _vars[p];	// Add some vars					}					// trace( p + " " + _vars[p] );				}								new_request.method = method;	// define the method				new_request.data = new_vars;	// set vars object as data 			}						loader.addEventListener( Event.COMPLETE, on_complete );			loader.addEventListener( IOErrorEvent.IO_ERROR, on_ioerror );			loader.load( new_request );		}				private function on_complete( e:Event ):void {			data = e.target.data;			dispatchEvent( new Event( Event.COMPLETE ) );		}				private function on_ioerror( e:IOErrorEvent ):void {			trace( e.toString() );		}	}}