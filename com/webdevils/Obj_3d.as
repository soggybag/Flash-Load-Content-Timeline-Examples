package com.webdevils {	import flash.display.*;		public class Obj_3d extends MovieClip {		static const WIDGET:Number = Math.PI / 180;				public var myX:Number;		public var myY:Number;		public var myZ:Number;				public var update:Boolean;			// Constructor ----------------------------------------------------------------		public function Obj_3d( _x:Number = 0, _y:Number = 0, _z:Number = 0 ) { // --- Make_3d3			myX = _x;			myY = _y;			myZ = _z;			visible = false;			update = true;		} // --------------------------------------------------------------------------				// getter setters -------------------------------------------------------------		public function set X( n:Number ):void {			myX = n;			update = true;		}				public function set Y( n:Number ):void {			myY = n;			update = true;		}				public function set Z( n:Number ):void {			myZ = n;			update = true;		}				public function get X():Number {			return myX;		}				public function get Y():Number {			return myY;		}				public function get Z():Number {			return myZ;		}// ---------------------------------------------------------------------------								// Move a clip in 3d space ----------------------------------------------------		public function translate_3d( new_x:Number, new_y:Number, new_z:Number ):void {			myX += new_x;			myY += new_y;			myZ += new_z;			update = true;		} // --------------------------------------------------------------------------				// Position a clip in 3d space ------------------------------------------------		public function position_3d( new_x:Number, new_y:Number, new_z:Number ):void {			myX = new_x;			myY = new_y;			myZ = new_z;			update = true;		} // --------------------------------------------------------------------------				// Rotate a clip around the origin --------------------------------------------		public function rotate_3d( rot_x:Number, rot_y:Number, rot_z:Number ):void {			var aSin = Math.sin( rot_x * WIDGET );			var aCos = Math.cos( rot_x * WIDGET );			var bSin = Math.sin( rot_y * WIDGET );			var bCos = Math.cos( rot_y * WIDGET );			var cSin = Math.sin( rot_z * WIDGET );			var cCos = Math.cos( rot_z * WIDGET ); 						var x1 = myX;			var y1 = ( myY * aCos ) - ( myZ * aSin );			var z1 = ( myZ * aCos ) + ( myY * aSin );			// trace( "X1:" + x1 + " y1:" + y1 + " z1:" + z1 );			var x2 = ( x1 * bCos ) - ( z1 * bSin );			var y2 = y1;			var z2 = ( z1 * bCos ) + ( x1 * bSin );			// trace( "X2:" + x2 + " y2:" + y2 + " z2:" + z2 );			var x3 = ( x2 * cCos ) - ( y2 * cSin );			var y3 = ( y2 * cCos ) + ( x2 * cSin );			var z3 = z2;			// trace( "X3:" + x3 + " y3:" + y3 + " z3:" + z3 );			myX = x3;			myY = y3;			myZ = z3;						update = true;		} // ---------------------------------------------------------------------------	}}			